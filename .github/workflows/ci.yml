name: 🔄 CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  merge_group:
    types: [checks_requested]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '18'
  CACHE_KEY_PREFIX: 'v1'

jobs:
  # 🔍 Pre-flight checks
  changes:
    name: 🔍 Detect Changes
    runs-on: ubuntu-latest
    outputs:
      src: ${{ steps.changes.outputs.src }}
      docs: ${{ steps.changes.outputs.docs }}
      deps: ${{ steps.changes.outputs.deps }}
      e2e: ${{ steps.changes.outputs.e2e }}
      config: ${{ steps.changes.outputs.config }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔍 Detect file changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            src:
              - 'lib/**'
              - 'src/**'
              - '*.ts'
              - '*.js'
            docs:
              - 'docs/**'
            deps:
              - 'package*.json'
              - '.nvmrc'
            e2e:
              - 'e2e/**'
              - 'playwright.config.ts'
            config:
              - '.github/**'
              - '*.config.*'
              - 'tsconfig*.json'

  # ⚡ Setup and cache dependencies
  setup:
    name: ⚡ Setup Dependencies
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.src == 'true' || needs.changes.outputs.deps == 'true' || needs.changes.outputs.docs == 'true' || needs.changes.outputs.e2e == 'true'
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🏗️ Install dependencies
        run: |
          npm ci --prefer-offline --no-audit
          cd docs && npm ci --prefer-offline --no-audit

      - name: 💾 Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            docs/node_modules
            ~/.npm
          key: ${{ env.CACHE_KEY_PREFIX }}-deps-${{ runner.os }}-${{ hashFiles('package-lock.json', 'docs/package-lock.json') }}
          restore-keys: |
            ${{ env.CACHE_KEY_PREFIX }}-deps-${{ runner.os }}-

  # 🔍 Code Quality & Security
  quality:
    name: 🔍 Code Quality
    runs-on: ubuntu-latest
    needs: [changes, setup]
    if: needs.changes.outputs.src == 'true' || needs.changes.outputs.config == 'true'
    strategy:
      matrix:
        check: [lint, typecheck, format-check]
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔄 Restore dependencies
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            docs/node_modules
            ~/.npm
          key: ${{ env.CACHE_KEY_PREFIX }}-deps-${{ runner.os }}-${{ hashFiles('package-lock.json', 'docs/package-lock.json') }}

      - name: 🔍 Run ${{ matrix.check }}
        run: npm run ${{ matrix.check }}

  # 🔒 Security scanning
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: [changes, setup]
    if: needs.changes.outputs.src == 'true' || needs.changes.outputs.deps == 'true'
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔄 Restore dependencies
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            docs/node_modules
            ~/.npm
          key: ${{ env.CACHE_KEY_PREFIX }}-deps-${{ runner.os }}-${{ hashFiles('package-lock.json', 'docs/package-lock.json') }}

      - name: 🔒 Run security audit
        run: npm audit --audit-level moderate

      - name: 🔍 CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: typescript, javascript

      - name: 🔍 Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # 🧪 Unit Tests
  test:
    name: 🧪 Unit Tests
    runs-on: ubuntu-latest
    needs: [changes, setup]
    if: needs.changes.outputs.src == 'true'
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔄 Restore dependencies
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            docs/node_modules
            ~/.npm
          key: ${{ env.CACHE_KEY_PREFIX }}-deps-${{ runner.os }}-${{ hashFiles('package-lock.json', 'docs/package-lock.json') }}

      - name: 🧪 Run unit tests
        run: npm run test:coverage

      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: unit-tests
          fail_ci_if_error: false

      - name: 📋 Comment coverage on PR
        if: github.event_name == 'pull_request'
        uses: romeovs/lcov-reporter-action@v0.3.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          lcov-file: ./coverage/lcov.info

  # 🏗️ Build
  build:
    name: 🏗️ Build Package
    runs-on: ubuntu-latest
    needs: [changes, setup]
    if: needs.changes.outputs.src == 'true'
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔄 Restore dependencies
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            docs/node_modules
            ~/.npm
          key: ${{ env.CACHE_KEY_PREFIX }}-deps-${{ runner.os }}-${{ hashFiles('package-lock.json', 'docs/package-lock.json') }}

      - name: 🏗️ Build package
        run: npm run build

      - name: 📦 Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: lib/
          retention-days: 7

  # 📚 Build Documentation
  docs-build:
    name: 📚 Build Documentation
    runs-on: ubuntu-latest
    needs: [changes, setup]
    if: needs.changes.outputs.docs == 'true' || needs.changes.outputs.src == 'true'
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔄 Restore dependencies
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            docs/node_modules
            ~/.npm
          key: ${{ env.CACHE_KEY_PREFIX }}-deps-${{ runner.os }}-${{ hashFiles('package-lock.json', 'docs/package-lock.json') }}

      - name: 🏗️ Build main package first
        run: npm run build

      - name: 📚 Generate API docs
        run: npm run docusaurus:typedoc

      - name: 🏗️ Build documentation
        run: npm run docusaurus:build

      - name: 📦 Upload docs artifacts
        uses: actions/upload-artifact@v3
        with:
          name: docs-build
          path: docs/build/
          retention-days: 7

  # 🎭 E2E Tests
  e2e:
    name: 🎭 E2E Tests (${{ matrix.browser }})
    runs-on: ubuntu-latest
    needs: [changes, setup, docs-build]
    if: needs.changes.outputs.e2e == 'true' || needs.changes.outputs.docs == 'true'
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox, webkit]
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔄 Restore dependencies
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            docs/node_modules
            ~/.npm
          key: ${{ env.CACHE_KEY_PREFIX }}-deps-${{ runner.os }}-${{ hashFiles('package-lock.json', 'docs/package-lock.json') }}

      - name: 📥 Download docs build
        uses: actions/download-artifact@v3
        with:
          name: docs-build
          path: docs/build/

      - name: 🎭 Install Playwright browsers
        run: npx playwright install ${{ matrix.browser }} --with-deps

      - name: 🧪 Run E2E tests
        run: npx playwright test --project=${{ matrix.browser }} --workers=1
        env:
          CI: true
          # Ensure headless mode in CI
          PLAYWRIGHT_HEADLESS: true

      - name: 📦 Upload test results
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: e2e-results-${{ matrix.browser }}
          path: test-results/
          retention-days: 7

  # ✅ Final validation for merge queue
  validation:
    name: ✅ Final Validation
    runs-on: ubuntu-latest
    needs: [quality, security, test, build, docs-build, e2e]
    if: always()
    steps:
      - name: 🎯 Check all jobs status
        run: |
          echo "Quality: ${{ needs.quality.result }}"
          echo "Security: ${{ needs.security.result }}"
          echo "Test: ${{ needs.test.result }}"
          echo "Build: ${{ needs.build.result }}"
          echo "Docs Build: ${{ needs.docs-build.result }}"
          echo "E2E: ${{ needs.e2e.result }}"

          if [ "${{ needs.quality.result }}" != "success" ] || \
             [ "${{ needs.security.result }}" != "success" ] || \
             [ "${{ needs.test.result }}" != "success" ] || \
             [ "${{ needs.build.result }}" != "success" ] || \
             [ "${{ needs.docs-build.result }}" != "success" ] || \
             [ "${{ needs.e2e.result }}" != "success" ]; then
            echo "❌ One or more jobs failed"
            exit 1
          fi
          echo "✅ All jobs passed successfully"
